package com.tss.furniture.Test;

import java.util.Scanner;

// Import all necessary interfaces and concrete factories from their new, consolidated package
import com.tss.furniture.IFurniture;
import com.tss.furniture.IFurnitureFactory;
import com.tss.furniture.ModernFurnitureFactory;
import com.tss.furniture.VictorianFurnitureFactory;

public class FurnitureTest {

    // Removed the constructor and orderFurnitureSet method as per the new interactive flow

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);
        IFurnitureFactory selectedFactory = null; // This will hold the chosen style's factory

        System.out.println("--- Welcome to the Furniture Shop ---");

        // --- Step 1: User Selects a Furniture Style (determines the Concrete Factory) ---
        while (selectedFactory == null) {
            System.out.println("Please select a furniture style:");
            System.out.println("1. Modern");
            System.out.println("2. Victorian");
            System.out.print("Enter your choice (1 or 2): ");

            try {
                int styleChoice = scanner.nextInt();
                scanner.nextLine(); // Consume the leftover newline character

                switch (styleChoice) {
                    case 1:
                        selectedFactory = new ModernFurnitureFactory();
                        System.out.println("You selected Modern style. Let's start picking items!");
                        break;
                    case 2:
                        selectedFactory = new VictorianFurnitureFactory();
                        System.out.println("You selected Victorian style. Let's start picking items!");
                        break;
                    default:
                        System.out.println("Invalid style choice. Please enter 1 or 2.");
                }
            } catch (Exception e) {
                System.out.println("Invalid input. Please enter a number (1 or 2).");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
            }
        }

        // --- Step 2: User Selects Individual Furniture Items within the Chosen Style ---
        boolean orderingFinished = false;
        while (!orderingFinished) {
            System.out.println("\nWhat furniture item would you like to order from the " +
                                selectedFactory.getClass().getSimpleName().replace("FurnitureFactory", "") + " style?");
            System.out.println("1. Table");
            System.out.println("2. Chair");
            System.out.println("3. Sofa");
            System.out.println("4. Finish Ordering");
            System.out.print("Enter your choice (1-4): ");

            try {
                int itemChoice = scanner.nextInt();
                scanner.nextLine(); // Consume the leftover newline character

                IFurniture furnitureItem = null; // Abstract Product reference

                switch (itemChoice) {
                    case 1:
                        furnitureItem = selectedFactory.createTable(); // Factory Method
                        break;
                    case 2:
                        furnitureItem = selectedFactory.createChair(); // Factory Method
                        break;
                    case 3:
                        furnitureItem = selectedFactory.createSofa();  // Factory Method
                        break;
                    case 4:
                        orderingFinished = true;
                        System.out.println("Finishing order. Thank you for shopping with us!");
                        break;
                    default:
                        System.out.println("Invalid item choice. Please enter a number between 1 and 4.");
                        break;
                }

                if (furnitureItem != null && itemChoice != 4) { // If an item was created and user didn't choose 'Finish'
                    furnitureItem.describe(); // Describe the created item (polymorphism)
                }

            } catch (Exception e) {
                System.out.println("Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input
            }
        }

        scanner.close(); // Close the scanner to release resources
        System.out.println("\n--- Order process completed ---");
    }
}